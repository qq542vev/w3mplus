#!/usr/bin/env sh

## File: undotab
##
## Restore w3m tabs.
##
## Usage:
##
##   (start code)
##   undotab [OPTION]...
##   (end)
##
## Options:
##
##   -c, --config=FILE   - restore file.
##   -C, --count=NUMBER  - restore count.
##   -n, --number=NUMBER - restore number.
##   -h, --help          - display this help and exit.
##   -v, --version       - output version information and exit.
##
## Exit Status:
##
##   0 - Program terminated normally.
##   64<= and <=78 - Program terminated abnormally. See </usr/include/sysexits.h> for the returned value.
##
## Metadata:
##
##   author - qq542vev <https://purl.org/meta/me/>
##   version - 3.0.0
##   date - 2020-12-15
##   since - 2019-08-02
##   copyright - Copyright (C) 2019-2020 qq542vev. Some rights reserved.
##   license - CC-BY <https://creativecommons.org/licenses/by/4.0/>
##   package - w3mplus
##
## See Also:
##
##   * Project homepage - <https://github.com/qq542vev/w3mplus>
##   * Bag report - <https://github.com/qq542vev/w3mplus/issues>

# 初期化
set -efu
umask '0022'
IFS=$(printf ' \t\n$'); IFS="${IFS%$}"
export 'IFS'

# initファイルの読み込み
: "${W3MPLUS_PATH:=${HOME}/.w3m/w3mplus}"
. "${W3MPLUS_PATH}/lib/w3mplus/init"

# 各変数に既定値を代入する
null='/dev/null'
config="${W3MPLUS_UNDO_FILE}"
count='+1'
number='+1'
args=''

# コマンドライン引数の解析する
while [ 1 -le "${#}" ]; do
	case "${1}" in
		'-c' | '--config')
			config="${2}"
			shift 2
			;;
		'-C' | '--count')
			if ( expr -- "${2}" ':' '[+-]0$' || expr -- "${2}" ':' '[+-][1-9][0-9]*$' || expr -- "${2}" ':' '@[+-]\{0,1\}0$' || expr -- "${2}" ':' '@[+-]\{0,1\}[1-9][0-9]*$' ) >"${null}"; then
				count="${2}"
				shift 2
			else
				printf 'The option "%s" must be a integer or timestamp.\n' "${1}" 1>&2
				exitStatus="${EX_USAGE}"; exit
			fi
			;;
		'-n' | '--number')
			if ( expr -- "${2}" ':' '[+-][1-9][0-9]*$' || [ "${2}" = '@0' ] || expr -- "${2}" ':' '@[1-9][0-9]*$' ) >"${null}"; then
				number="${2}"
				shift 2
			else
				printf 'The option "%s" must be a integer or timestamp.\n' "${1}" 1>&2
				exitStatus="${EX_USAGE}"; exit
			fi
			;;
		# ヘルプメッセージを表示して終了する
		'-h' | '--help')
			usage
			exit
			;;
		# バージョン情報を表示して終了する
		'-v' | '--version')
			version
			exit
			;;
		# `--name=value` 形式のロングオプション
		'--'[!-]*'='*)
			option="${1}"
			shift
			# `--name value` に変換して再セットする
			set -- "${option%%=*}" "${option#*=}" ${@+"${@}"}
			;;
		# 以降はオプション以外の引数
		'--')
			shift

			args="${args}$(quoteEscape ${@+"${@}"})"
			shift "${#}"
			;;
		# 複合ショートオプション
		'-'[!-][!-]*)
			option=$(printf '%s\n' "${1}" | cut -c '2'; printf '$')
			options=$(printf '%s\n' "${1}" | cut -c '3-'; printf '$')

			shift
			# `-abc` を `-a -bc` に変換して再セットする
			set -- "-${option%?$}" "-${options%?$}" ${@+"${@}"}
			;;
		# その他の無効なオプション
		'-'*)
			cat <<- EOF 1>&2
				${0##*/}: invalid option -- '${1}'
				Try '${0##*/} --help' for more information.
			EOF

			exitStatus="${EX_USAGE}"; exit
			;;
		# その他のオプション以外の引数
		*)
			args="${args}$(quoteEscape "${1}")"
			shift
			;;
	esac
done

directory=$(dirname -- "${config}"; printf '$')
mkdir -p -- "${directory%?$}"
: >>"${config}"

# オプション以外の引数を再セットする
eval set -- "${args}"

# 引数の個数が過大である
if [ 0 -lt "${#}" ]; then
	cat <<- EOF 1>&2
		${0##*/}: too many arguments
		Try '${0##*/} --help' for more information.
	EOF

	exitStatus="${EX_USAGE}"; exit
fi

limitTime=$(($(date -u '+%Y%m%d%H%M%S' | TZ='UTC+0' utconv) - W3MPLUS_UNDO_TIMEOUT))
lineCount=$(grep -c -e '^' -- "${config}" || :)

awk -F '\t' -v "limitTime=${limitTime}" -v "file=${config}" -- "$(
	cat <<-'EOF'
	{
		unixtime = $NF

		if(unixtime <= limitTime) {
			gsub(/'+/, "'\"&\"'", file)
			system(": >'" file "'")
			exit
		}

		printf("%s\n", $0)
	}
	EOF
)" "${config}" | sponge -- "${config}"

case "${number}" in
	'@'*)
		case "${count}" in
			'@'*)
				result=$(awk -v "timePosition=${number#@}" -v "timeCount=${count#@}" -v "lineCount=${lineCount}" -- "$(
					cat <<-'EOF'
					BEGIN {
						position = 0
						count = 0
						starttime = timePosition
						endtime = (index(timeCount, "+") || index(timeCount, "-")) ? (timePosition + timeCount) : timeCount

						if(starttime < endtime) {
							tmpVar = starttime
							starttime = endtime
							endtime = tmpVar
						}
					}

					{
						unixtime = $NF

						if(position == 0 && unixtime <= starttime) {
							position = NR
						}

						if(0 < position && unixtime < endtime) {
							count = NR - position

							if(count == 0) {
								position = 0
							}

							exit
						}
					}

					END {
						if(position == 0) {
							position = lineCount
						} else if(count == 0) {
							count = NR
						}

						printf("%d %d\n", position, count)
					}
					EOF
				)" "${config}")

				number="${result% *}"
				count="${result#* }"
				;;
			*)
				number=$(awk -v "starttime=${number#@}" -- "$(
					cat <<-'EOF'
					{
						unixtime = $NF

						if(unixtime <= starttime) {
							exit
						}
					}

					END {
						printf("%d", NR)
					}
					EOF
				)" "${config}")
				;;
		esac
		;;
	'+'*)
		number=$((number))
		;;
	'-'*)
		number=$((lineCount + number + 2))

		if [ "${number}" -lt '1' ]; then
			number='1'
		fi
		;;
esac

case "${count}" in
	'+0')
		count="${lineCount}"
		;;
	'+'*)
		count=$((count))
		;;
	'-0')
		count=$((number - 1))
		number='1'
		;;
	'-'*)
		if [ '1' -le "$((number + count))" ]; then
			number=$((number + count))
			count=$((count * -1))
		else
			count=$((number - 1))
			number='1'
		fi
		;;
esac

tail -n "+${number}" -- "${config}" | head -n "${count}"

{
	head -n "$((number - 1))" -- "${config}"
	tail -n "+$((number + count))" -- "${config}"
} | sponge -- "${config}"
