#!/usr/bin/env sh

## File: uricheck
##
## Verify the URI..
##
## Usage:
##
##   (start code)
##   uricheck [OPTION]... [URI]...
##   (end)
##
## Options:
##
##   -f, --field=[FIELD] - specify the fields to be output separated by commas. The only values that can be specified for TYPE are 'original', 'scheme', 'authority', 'userinfo', 'host', 'port', 'path', 'query' and 'fragment'. If '!' is suffixed to 'scheme' 'authority', 'userinfo', 'port', 'query' or 'fragment', the delimiter is also output.
##   -m, --match         - displays the URI.
##   -n, --normalize     - normalize URI.
##   -V, --invert        - displays that it is not a URI.
##   -h, --help          - display this help and exit.
##   -v, --version       - output version information and exit.
##
## Exit Status:
##
##   0 - Program terminated normally.
##   1 - There was an argument other than URI.
##   64<= and <=78 - Program terminated abnormally. See </usr/include/sysexits.h> for the returned value.
##
## Metadata:
##
##   author - qq542vev <https://purl.org/meta/me/>
##   version - 1.3.0
##   date - 2020-12-15
##   since - 2020-02-21
##   copyright - Copyright (C) 2020 qq542vev. Some rights reserved.
##   license - CC-BY <https://creativecommons.org/licenses/by/4.0/>
##   package - w3mplus
##
## See Also:
##
##   * Project homepage - <https://github.com/qq542vev/w3mplus>
##   * Bag report - <https://github.com/qq542vev/w3mplus/issues>

# 初期化
set -efu
umask '0022'
IFS=$(printf ' \t\n$'); IFS="${IFS%$}"
export 'IFS'

# initファイルの読み込み
: "${W3MPLUS_PATH:=${HOME}/.w3m/w3mplus}"
. "${W3MPLUS_PATH}/lib/w3mplus/init"

fieldPattern='(original|scheme!?|authority!?|userinfo!?|host|port!?|path|query!?|fragment!?)'

# 各変数に既定値を代入する
field='original'
type='match'
normalizeFlag='0'
verboseFlag='0'
args=''

# コマンドライン引数の解析する
while [ 1 -le "${#}" ]; do
	case "${1}" in
		'-f' | '--field')
			if [ -z "${2}" ] || ( [ "$(printf '%s' "${2}" | wc -l)" -eq 0 ] && printf '%s' "${2}" | grep -Eq -e "^${fieldPattern}(,${fieldPattern})*$" ); then
				field="${2}"
				shift 2
			else
				cat <<- EOF 1>&2
					${0##*/}: invalid '${1}' option value -- '${2}'
					Try '${0##*/} --help' for more information.
				EOF

				exitStatus="${EX_USAGE}"; exit
			fi
			;;
		'-m' | '--match')
			type='match'
			shift
			;;
		'-n' | '--normalize')
			normalizeFlag='1'
			shift
			;;
		'--verbose')
			verboseFlag='1'
			shift
			;;
		'-V' | '--invert')
			type='invert'
			shift
			;;
		# ヘルプメッセージを表示して終了する
		'-h' | '--help')
			usage
			exit
			;;
		# バージョン情報を表示して終了する
		'-v' | '--version')
			version
			exit
			;;
		# 標準入力を処理する
		'-')
			args="${args}$(quoteEscape $(tr -- '[:space:]' ' '))"
			shift
			;;
		# `--name=value` 形式のロングオプション
		'--'[!-]*'='*)
			option="${1}"
			shift
			# `--name value` に変換して再セットする
			set -- "${option%%=*}" "${option#*=}" ${@+"${@}"}
			;;
		# 以降はオプション以外の引数
		'--')
			shift
			args="${args}$(quoteEscape ${@+"${@}"})"
			shift "${#}"
			;;
		# 複合ショートオプション
		'-'[!-][!-]*)
			option=$(printf '%s\n' "${1}" | cut -c '2'; printf '$')
			options=$(printf '%s\n' "${1}" | cut -c '3-'; printf '$')

			shift
			# `-abc` を `-a -bc` に変換して再セットする
			set -- "-${option%?$}" "-${options%?$}" ${@+"${@}"}
			;;
		# その他の無効なオプション
		'-'*)
			cat <<- EOF 1>&2
				${0##*/}: invalid option -- '${1}'
				Try '${0##*/} --help' for more information.
			EOF

			exitStatus="${EX_USAGE}"; exit
			;;
		# その他のオプション以外の引数
		*)
			args="${args}$(quoteEscape "${1}")"
			shift
			;;
	esac
done

# オプション以外の引数を再セットする
eval set -- "${args}"

# See Also - Regex matching URI <https://gist.github.com/zmwangx/10df52fa856ba0696922>
uriPattern='^[A-Za-z][A-Za-z0-9+.-]*:(//(([A-Za-z0-9._~!$&'\''()*+,;=:-]|%[0-9A-Fa-f]{2})*@)?(\[(((([0-9A-F]{1,4}:){6}|::([0-9A-F]{1,4}:){5}|([0-9A-F]{1,4})?::([0-9A-F]{1,4}:){4}|(([0-9A-F]{1,4}:){0,1}[0-9A-F]{1,4})?::([0-9A-F]{1,4}:){3}|(([0-9A-F]{1,4}:){0,2}[0-9A-F]{1,4})?::([0-9A-F]{1,4}:){2}|(([0-9A-F]{1,4}:){0,3}[0-9A-F]{1,4})?::[0-9A-F]{1,4}:|(([0-9A-F]{1,4}:){0,4}[0-9A-F]{1,4})?::)([0-9A-F]{1,4}:[0-9A-F]{1,4}|(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-F]{1,4}:){0,5}[0-9A-F]{1,4})?::[0-9A-F]{1,4}|(([0-9A-F]{1,4}:){0,6}[0-9A-F]{1,4})?::)|v[0-9A-F]+\.[A-Za-z0-9._~!$&'\''()*+,;=:-]+)]|(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])|([A-Za-z0-9._~!$&'\''()*+,;=-]|%[0-9A-Fa-f]{2})*)(:[0-9]*)?(/(([A-Za-z0-9._~!$&'\''()*+,;=:@-]|%[0-9A-Fa-f]{2}))*)*|/((([A-Za-z0-9._~!$&'\''()*+,;=:@-]|%[0-9A-Fa-f]{2}))+(/(([A-Za-z0-9._~!$&'\''()*+,;=:@-]|%[0-9A-Fa-f]{2}))*)*)?|(([A-Za-z0-9._~!$&'\''()*+,;=:@-]|%[0-9A-Fa-f]{2}))+(/(([A-Za-z0-9._~!$&'\''()*+,;=:@-]|%[0-9A-Fa-f]{2}))*)*|)(\?([A-Za-z0-9._~!$&'\''()*+,;=:@/?-]|%[0-9A-Fa-f]{2})*)?(#([A-Za-z0-9._~!$&'\''()*+,;=:@/?-]|%[0-9A-Fa-f]{2})*)?$'
uriSplitPattern='^\([^:/?#]\{1,\}:\)\{0,1\}\(\/\/\([^@/?#]*@\)\{0,1\}\([^:/?#]*\)\(:[^/?#]*\)\{0,1\}\)\{0,1\}\([^?#]*\)\(?[^#]*\)\{0,1\}\(#.*\)\{0,1\}$'
awkScript='
	BEGIN {
		fieldCount = split(field, fields, ",")
	}

	# See Also - 5.2.4. Remove Dot Segments <https://tools.ietf.org/html/rfc3986#section-5.2.4>
	function remove_dot_segments(path, output) {
		if(!index(path, ".")) {
			return path
		}

		output = ""

		while(path != "") {
			if(index(path, "./") == 1) {
				path = substr(path, 3)
			} else if(index(path, "../") == 1) {
				path = substr(path, 4)
			} else if(index(path, "/./") == 1) {
				path = substr(path, 3)
			} else if(path == "/.") {
				path = "/"
			} else if(index(path, "/../") == 1) {
				path = substr(path, 4)
				gsub(/\/?[^\/]*$/, "", output)
			} else if(path == "/..") {
				path = "/"
				gsub(/\/?[^\/]*$/, "", output)
			} else if(path == "." || path == "..") {
				path = ""
			} else {
				match(path, /^.[^\/]*/)

				output = output substr(path, RSTART, RLENGTH)
				path = substr(path, RLENGTH + 1)
			}
		}

		return output
	}

	{
		if(normalizeFlag == 1) {
			$1 = tolower($1)

			if($2 != "") {
				$4 = tolower($4)

				if($5 == ":") {
					$5 = ""
				}

				$2 = "//" $3 $4 $5
			}

			$6 = remove_dot_segments($6)
		}

		for(i = 1; i <= fieldCount; i++) {
			if(fields[i] == "original") {
				printf("%s", $1 $2 $6 $7 $8)
			} else if(fields[i] == "scheme") {
				printf("%s", substr($1, 1, length($1) - 1))
			} else if(fields[i] == "scheme!") {
				printf("%s", $1)
			} else if(fields[i] == "authority") {
				printf("%s", substr($2, 3))
			} else if(fields[i] == "authority!") {
				printf("%s", $2)
			} else if(fields[i] == "userinfo") {
				printf("%s", substr($3, 1, length($3) - 1))
			} else if(fields[i] == "userinfo!") {
				printf("%s", $3)
			} else if(fields[i] == "host") {
				printf("%s", $4)
			} else if(fields[i] == "port") {
				printf("%s", substr($5, 2))
			} else if(fields[i] == "port!") {
				printf("%s", $5)
			} else if(fields[i] == "path") {
				printf("%s", $6)
			} else if(fields[i] == "query") {
				printf("%s", substr($7, 2))
			} else if(fields[i] == "query!") {
				printf("%s", $7)
			} else if(fields[i] == "fragment") {
				printf("%s", substr($8, 2))
			} else if(fields[i] == "fragment!") {
				printf("%s", $8)
			}

			printf(i == fieldCount ? "\n" : "\t")
		}
	}
'
normalizePercent='
	BEGIN {
		split("", hex)

		# Character range 0 - 9
		for(i = 48; i <= 57; i++) {
			hex["%" sprintf("%X", i)] = sprintf("%c", i)
		}

		# Character range A - Z
		for(i = 65; i <= 90; i++) {
			hex["%" sprintf("%X", i)] = sprintf("%c", i)
		}

		# Characters range a- z
		for(i = 97; i <= 122; i++) {
			hex["%" sprintf("%X", i)] = sprintf("%c", i)
		}

		hex["%2D"] = "-"
		hex["%2E"] = "."
		hex["%5F"] = "_"
		hex["%7E"] = "~"
	}

	function normalize(string, position,encoded) {
		position = index(string, "%")

		if(position) {
			encoded = toupper(substr(string, position, 3))

			return substr(string, 1, position - 1) (encoded in hex ? hex[encoded] : encoded) normalize(substr(string, position + 3))
		}

		return string
	}

	{
		printf("%s", normalize($0))
	}
'

for uri in ${@+"${@}"}; do
	if [ "$(printf '%s' "${uri}" | wc -l)" -eq 0 ] && printf '%s' "${uri}" | grep -Eq -e "${uriPattern}"; then
		case "${type}" in
			'match')
				case "${normalizeFlag}" in '1')
					uri=$(printf '%s' "${uri}" | awk -- "${normalizePercent}")
					;;
				esac

				printf '%s' "${uri}" | sed -e "s/${uriSplitPattern}/\\1|\\2|\\3|\\4|\\5|\\6|\\7|\\8/" | awk -v "field=${field}" -v "normalizeFlag=${normalizeFlag}" -F '|' -- "${awkScript}"
				;;
			'invert')
				case "${verboseFlag}" in '1')
					printf "%s: URI -- '%s'\\n" "${0##*/}" "${uri}" 1>&2
					;;
				esac

				exitStatus='1'
				;;
		esac
	else
		case "${type}" in
			'match')
				case "${verboseFlag}" in '1')
					printf "%s: not URI -- '%s'\\n" "${0##*/}" "${uri}" 1>&2
					;;
				esac

				exitStatus='1'
				;;
			'invert')
				case "${field}" in *?*)
					printf '%s\n' "${uri}"
					;;
				esac
				;;
		esac
	fi
done
