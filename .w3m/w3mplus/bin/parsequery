#!/usr/bin/env sh

## File: parsequery
##
## Parse the HTTP query.
##
## Usage:
##
##   (start code)
##   parsequery [OPTION]... [FILE]...
##   (end)
##
## Options:
##
##   -e, --encode        - URL encode for variable name.
##   -p, --prefix=TOKEN  - variable name prefix.
##   -s, --suffix=TOKEN  - variable name suffix.
##   -h, --help          - display this help and exit.
##   -v, --version       - output version information and exit.
##
## Exit Status:
##
##   0 - Program terminated normally.
##   64<= and <=78 - Program terminated abnormally. See </usr/include/sysexits.h> for the returned value.
##
## Metadata:
##
##   author - qq542vev <https://purl.org/meta/me/>
##   version - 1.2.1
##   date - 2020-07-14
##   since - 2019-05-28
##   copyright - Copyright (C) 2019-2020 qq542vev. Some rights reserved.
##   license - CC-BY <https://creativecommons.org/licenses/by/4.0/>
##   package - w3mplus
##
## See Also:
##
##   * Project homepage - <https://github.com/qq542vev/w3mplus>
##   * Bag report - <https://github.com/qq542vev/w3mplus/issues>

# 初期化
set -efu
umask '0022'
IFS=$(printf ' \t\n$'); IFS="${IFS%$}"
export 'IFS'

# initファイルの読み込み
: "${W3MPLUS_PATH:=${HOME}/.w3m/w3mplus}"
. "${W3MPLUS_PATH}/lib/w3mplus/init"

# 各変数に既定値を代入する
tmpDir=$(mktemp -d)
encode='0'
prefix=''
suffix=''
args=''

# コマンドライン引数の解析する
while [ 1 -le "${#}" ]; do
	case "${1}" in
		'-e' | '--encode')
			encode='1'
			shift
			;;
		'-p' | '--prefix')
			if expr -- "${2}" ':' '[_A-Za-z][_A-Za-z0-9]*$' >'/dev/null'; then
				prefix="${2}"
				shift 2
			else
				cat <<- EOF 1>&2
					${0##*/}: invalid '${1}' option value -- '${2}'
					Try '${0##*/} --help' for more information.
				EOF
			fi
			;;
		'-s' | '--suffix')
			if expr -- "${2}" ':' '[_A-Za-z0-9]\{1,\}$' >'/dev/null'; then
				suffix="${2}"
				shift 2
			else
				cat <<- EOF 1>&2
					${0##*/}: invalid '${1}' option value -- '${2}'
					Try '${0##*/} --help' for more information.
				EOF
			fi
			;;
		# ヘルプメッセージを表示して終了する
		'-h' | '--help')
			usage
			exit
			;;
		# バージョン情報を表示して終了する
		'-v' | '--version')
			version
			exit
			;;
		# 標準入力を処理する
		'-')
			tmpFile=$(mktemp -p "${tmpDir}")
			cat >"${tmpFile}"
			shift
			set -- "${tmpFile}" ${@+"${@}"}
			;;
		# `--name=value` 形式のロングオプション
		'--'[!-]*'='*)
			option="${1}"
			shift
			# `--name value` に変換して再セットする
			set -- "${option%%=*}" "${option#*=}" ${@+"${@}"}
			;;
		# 以降はオプション以外の引数
		'--')
			shift
			args="${args}$(quoteEscape ${@+"${@}"})"
			shift "${#}"
			;;
		# 複合ショートオプション
		'-'[!-][!-]*)
			option=$(printf '%s\n' "${1}" | cut -c '2'; printf '$')
			options=$(printf '%s\n' "${1}" | cut -c '3-'; printf '$')

			shift
			# `-abc` を `-a -bc` に変換して再セットする
			set -- "-${option%?$}" "-${options%?$}" ${@+"${@}"}
			;;
		# その他の無効なオプション
		'-'*)
			cat <<- EOF 1>&2
				${0##*/}: invalid option -- '${1}'
				Try '${0##*/} --help' for more information.
			EOF

			exitStatus="${EX_USAGE}"; exit
			;;
		# その他のオプション以外の引数
		*)
			args="${args}$(quoteEscape "${1}")"
			shift
			;;
	esac
done

# オプション以外の引数を再セットする
eval set -- "${args}"

awkScript=$(
	cat <<- 'EOF'
	BEGIN {
		RS = "[\t\n\r ]+"
		FS = "[&;]+"
		split("", names)
		split("", values)
		count = 0
	}

	function uriDecode(string, output,line) {
		gsub(/'+/, "'\"&\"'", string)
		command = "printf '%s' '" string "' | urldecode"

		command | getline line
		output = line

		while(0 < (command | getline line)) {
			output = output "\n" line
		}

		close(command)

		return output
	}

	function quoteEscape(string) {
		gsub(/'+/, "'\"&\"'", string)
		string = "'" string "'"

		if(string != "''") {
			gsub(/^''|''$/, "", string)
		}

		return string
	}

	{
		for(i = 1; i <= NF; i++) {
			if($i != "") {
				start = index($i, "=")

				count++

				if(start) {
					names[count] = uriDecode(substr($i, 1, start - 1))
					values[count] = uriDecode(substr($i, start + 1))
				} else {
					names[count] = uriDecode($i)
					values[count] = ""
				}
			}
		}
	}

	END {
		for(i = 1; i <= count; i++) {
			if(encode) {
				line = ""
				command = "printf '%s' " quoteEscape(names[i]) " | urlencode | fsed '-' '%2D' | fsed '.' '%2E' | fsed '_' '%5F' | fsed '~' '%7E' | fsed '%' '_'"
				command | getline line
				close(command)

				printf("%s=%s\n", prefix line suffix, quoteEscape(values[i]))
			} else if(prefix == "" && suffix == "") {
				printf("%s %s%s", quoteEscape(names[i]), quoteEscape(values[i]), (i == count ? "\n" : " "))
			} else if(names[i] ~ /^[_A-Za-z0-9]+$/) {
				printf("%s=%s\n", prefix names[i] suffix, quoteEscape(values[i]))
			}
		}
	}
	EOF
)

awk -v "encode=${encode}" -v "prefix=${prefix}" -v "suffix=${suffix}" -- "${awkScript}" ${@+"${@}"}
