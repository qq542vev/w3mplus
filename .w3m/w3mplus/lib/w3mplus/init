#!/usr/bin/env sh

## File: init
##
## Definition of variables and functions used in w3mplus
##
## Usage:
##
##   (start code)
##   . w3mplus-functions
##   (end)
##
## Metadata:
##
##   author - qq542vev <https://purl.org/meta/me/>
##   version - 1.4.1
##   date - 2020-05-07
##   since - 2020-02-19
##   copyright - Copyright (C) 2020 qq542vev. Some rights reserved.
##   licence - CC-BY <https://creativecommons.org/licenses/by/4.0/>
##   package - w3mplus
##
## See Also:
##
##   * Project Homepage - <https://github.com/qq542vev/w3mplus>
##   * Bag report - <https://github.com/qq542vev/w3mplus/issues>

: "${W3MPLUS_PATH:=${HOME}/.w3m/w3mplus}"
: "${W3MPLUS_YANK:=( exec 3>&1 >>'${HOME}/w3mplusyank'; date '+# %Y-%m-%d %H:%M:%S %Z'; cat; printf '\\n'; exec 1>&3 3>&- )}"
: "${W3MPLUS_UNDO_TIMEOUT:=86400}"
: "${W3MPLUS_UNDO_HISTSIZE:=2000}"
: "${W3MPLUS_UNDO_FILE:=${W3MPLUS_PATH}/tabRestore}"
: "${W3MPLUS_VISUAL_TIMEOUT:=600}"
: "${W3MPLUS_SEARCH_CONFIG:=${W3MPLUS_PATH}/searchconfig}"
: "${W3MPLUS_SEARCH_ENGINE:=google}"
: "${W3MPLUS_SEARCH_HISTSIZE:=2000}"
: "${W3MPLUS_SEARCH_HISTFILE:=${W3MPLUS_PATH}/searchhistory}"
: "${W3MPLUS_REGISTER_FILE:=${W3MPLUS_PATH}/register}"
: "${W3MPLUS_OPERATORFUNC:=cat}"
: "${W3MPLUS_FORMATPRG:=cat}"
: "${W3MPLUS_EQUALPRG:=}"
: "${W3MPLUS_ZOOM_MAX:=300}"
: "${W3MPLUS_ZOOM_MIN:=30}"
: "${W3MPLUS_W3M_CONFIG:=${HOME}/.w3m/config}"
: "${W3MPLUS_W3M_SITECONF:=${HOME}/.w3m/siteconf}"
: "${W3MPLUS_CAPTIVEPORTAL:=0}"
: "${W3MPLUS_CLEANUP:=w3m-cleanup}"
: "${W3MPLUS_SEARCH_CONFIG:=${W3MPLUS_PATH}/searchconfig}"
: "${W3MPLUS_QUICKMARK_FILE:=${W3MPLUS_PATH}/quickmark}"
: "${W3MPLUS_LOCALMARK_FILE:=${W3MPLUS_PATH}/localmark}"
: "${W3MPLUS_LOCALMARKGOTO_FILE:=${W3MPLUS_PATH}/localmarkGoto}"
: "${W3MPLUS_AUTOCMD_FILE:=${W3MPLUS_PATH}/autoCommand}"

: "${W3MPLUS_TEMPLATE_HTTP:=${W3MPLUS_PATH}/lib/w3mplus/template/http}"
: "${W3MPLUS_TEMPLATE_HTML:=${W3MPLUS_PATH}/lib/w3mplus/template/html}"
: "${W3MPLUS_TEMPLATE_FRAMESET:=${W3MPLUS_PATH}/lib/w3mplus/template/frameset}"

PATH="${W3MPLUS_PATH}/bin${PATH:+:}${HOME}/bin${PATH:+:}${PATH-}"

. "${W3MPLUS_PATH}/lib/w3mplus/sysexits"

trap 'endCall' 0 # EXIT
trap 'endCall 129' 1 # SIGHUP
trap 'endCall 130' 2 # SIGINT
trap 'endCall 131' 3 # SIGQUIT
trap 'endCall 143' 15 # SIGTERM

endCall() {
	previousExitStatus="${?}"

	rm -fr -- ${tmpDir+"${tmpDir}"} ${tmpFile+"${tmpFile}"}

	if [ 1 -le "${#}" ]; then
		exit "${1}"
	elif [ "${previousExitStatus}" -ne 0 ]; then
		exit "${EX_SOFTWARE}"
	fi

	exit "${exitStatus-0}"
}

usage() {
	sed -e '/^## *(start code)/,/^## *(end)/!d' -- "${0}" | sed -e '1d; $d; s/^## */Usage: /'

	sed -e '/^## File:/,/^## .*:$/!d' -- "${0}" | sed -e '1d; $d; s/^## *//'

	printf 'Options\n'

	sed -n -e '/^## *-.* - /s/^## *//p' -- "${0}" | awk -F ' - ' '{print "  " $1 "  " $2}'

	printf '\nExit status\n'

	sed -n -e '/^## *[0-9]\{1,\}.* - /s/^## */  /p' -- "${0}"
}

version() {
	cat <<- EOF
		$(sed -n -e 's/^## File: //p' -- "${0}") ($(sed -n -e 's/^## *package - //p' -- "${0}")) $(sed -n -e 's/^## *version - //p' -- "${0}") (Last update: $(sed -n -e 's/^## *date - //p' -- "${0}"))
		$(sed -n -e 's/^## *copyright - //p' -- "${0}")
		License: $(sed -n -e 's/^## *license - //p' -- "${0}")
		Author: $(sed -n -e 's/^## *author - //p' -- "${0}")
	EOF
}

quoteEscape() (
	for arg in ${@+"${@}"}; do
		result=$(printf '%s\n' "${arg}" | sed -e "s/'\\{1,\\}/'\"&\"'/g"; printf '$')

		printf "'%s' " "${result%?$}"
	done
)

ancestorProsess() (
	pid="${1}"
	find="${2}"

	ps -o 'pid=,ppid=,comm' | awk -v "pid=${pid}" -v "find=${find}" -- '
		BEGIN {
			split("", ppid)
			split("", command)
		}

		function ancestorProsess(pid, find) {
			if(pid in command) {
				if(command[pid] == find) {
					return pid
				}

				return ancestorProsess(ppid[pid], find)
			}

			return -1
		}

		{
			ppid[$1] = $2
			command[$1] = $3
		}

		END {
			psid = ancestorProsess(pid, find)

			if(psid == -1) {
				exit 1
			}

			print psid
		}
	'
)

octalEncode() (
	case "${#}" in
		'0')
			cat
			;;
		*)
			for file in ${@+"${@}"}; do
				cat -- "${file}"
			done
			;;
	esac | od -v -A 'n' -t 'o1' | tr -d '\n' | sed 's/[[:blank:]]*$//; s/[[:blank:]]\{1,\}/\\/g'
)

sedEscape () (
	for string in ${@+"${@}"}; do
		printf '%s' "${string}" | sed -e 's/[].\*/[]/\\&/g; 1s/^^/\\^/; $s/$$/\\$/'
	done
)

pathtourl () (
	for path in ${@+"${@}"}; do
		printf 'file://%s\n' "$(printf '%s' "${path}" | urlencode | fsed '%2F' '/')"
	done
)
