#!/usr/bin/env sh


readonly 'VERSION=w3mfindinpage 1.1.5'



set -efu
umask '0022'
readonly "LC_ALL_ORG=${LC_ALL-}"
LC_ALL='C'
IFS=$(printf ' \t\n_')
IFS="${IFS%_}"
PATH="${PATH-}${PATH:+:}$(command -p getconf 'PATH')"
UNIX_STD='2003'         # HP-UX POSIX mode
XPG_SUS_ENV='ON'        # AIX POSIX mode
XPG_UNIX98='OFF'        # AIX UNIX 03 mode
POSIXLY_CORRECT='1'     # GNU Coreutils POSIX mode
COMMAND_MODE='unix2003' # macOS UNIX 03 mode
export 'LC_ALL' 'IFS' 'PATH' 'UNIX_STD' 'XPG_SUS_ENV' 'XPG_UNIX98' 'POSIXLY_CORRECT' 'COMMAND_MODE'




readonly 'EX_OK=0' # successful termination

readonly 'EX__BASE=64' # base value for error messages

readonly 'EX_USAGE=64'       # command line usage error
readonly 'EX_DATAERR=65'     # data format error
readonly 'EX_NOINPUT=66'     # cannot open input
readonly 'EX_NOUSER=67'      # addressee unknown
readonly 'EX_NOHOST=68'      # host name unknown
readonly 'EX_UNAVAILABLE=69' # service unavailable
readonly 'EX_SOFTWARE=70'    # internal software error
readonly 'EX_OSERR=71'       # system error (e.g., can't fork)
readonly 'EX_OSFILE=72'      # critical OS file missing
readonly 'EX_CANTCREAT=73'   # can't create (user) output file
readonly 'EX_IOERR=74'       # input/output error
readonly 'EX_TEMPFAIL=75'    # temp failure; user is invited to retry
readonly 'EX_PROTOCOL=76'    # remote error in protocol
readonly 'EX_NOPERM=77'      # permission denied
readonly 'EX_CONFIG=78'      # configuration error

readonly 'EX__MAX=78' # maximum listed value

trap 'case "${?}" in 0) end_call;; *) end_call "${EX_SOFTWARE}";; esac' 0 # EXIT
trap 'end_call 129' 1                                                     # SIGHUP
trap 'end_call 130' 2                                                     # SIGINT
trap 'end_call 131' 3                                                     # SIGQUIT
trap 'end_call 143' 15                                                    # SIGTERM

alias org_lc='LC_ALL="${LC_ALL_ORG}"'


end_call() {
	trap '' 0 # EXIT
	rm -fr -- ${tmpDir:+"${tmpDir}"}
	exit "${1:-0}"
}



option_error() {
	printf '%s: %s\n' "${0##*/}" "${1}" >&2
	printf "詳細については '%s' を実行してください。\\n" "${0##*/} --help" >&2

	end_call "${EX_USAGE}"
}



regex_match() {
	awk -- '
		BEGIN {
			for(i = 2; i < ARGC; i++) {
				if(ARGV[1] !~ ARGV[i]) {
					exit 1
				}
			}

			exit
		}
	' ${@+"${@}"} || return 1

	return 0
}






replace_all_fast() {
	eval "$1=\${2//\"\$3\"/\"\$4\"}"
}

replace_all_posix() {
	set -- "$1" "$2" "$3" "$4" ""
	until [ _"$2" = _"${2#*"$3"}" ] && eval "$1=\$5\$2"; do
		set -- "$1" "${2#*"$3"}" "$3" "$4" "$5${2%%"$3"*}$4"
	done
}

replace_all_pattern() {
	set -- "$1" "$2" "$3" "$4" ""
	until eval "[ _\"\$2\" = _\"\${2#*$3}\" ] && $1=\$5\$2"; do
		eval "set -- \"\$1\" \"\${2#*$3}\" \"\$3\" \"\$4\" \"\$5\${2%%$3*}\$4\""
	done
}

meta_escape() {
	if [ "${1#*\?}" ]; then # posh <= 0.5.4
		set -- '\\\\:\\\\\\\\' '\\\[:[[]' '\\\?:[?]' '\\\*:[*]' '\\\$:[$]'
	elif [ "${2%%\\*}" ]; then # bosh = all (>= 20181007), busybox <= 1.22.0
		set -- '\\\\:\\\\\\\\' '\[:[[]' '\?:[?]' '\*:[*]' '\$:[$]'
	else # POSIX compliant
		set -- '\\:\\\\' '\[:[[]' '\?:[?]' '\*:[*]' '\$:[$]'
	fi

	set "$@" '\(:\\(' '\):\\)' '\|:\\|' '\":\\\"' '\`:\\\`' \
		'\{:\\{' '\}:\\}' "\\':\\\\'" '\&:\\&' '\=:\\=' '\>:\\>' "end"

	echo 'meta_escape() { set -- "$1" "$2" ""'
	until [ "$1" = "end" ] && shift && printf '%s\n' "$@"; do
		set -- "${1%:*}" "${1#*:}" "$@"
		set -- "$@" 'until [ _"$2" = _"${2#*'"$1"'}" ] && set -- "$1" "$3$2" ""; do'
		set -- "$@" '  set -- "$1" "${2#*'"$1"'}" "$3${2%%'"$1"'*}'"$2"'"'
		set -- "$@" 'done'
		shift 3
	done
	echo 'eval "$1=\"\$3\$2\""; }'
}
eval "$(meta_escape "a?" '\')"

replace_all() {
	(eval 'v="*#*/" p="#*/"; [ "${v//"$p"/-}" = "*-" ]') 2>/dev/null && return 0
	[ "${1#"$2"}" = "a*b" ] && return 1 || return 2
}
eval 'replace_all "a*b" "a[*]" &&:' && :
case $? in
0) # Fast version (Not POSIX compliant)
	replace_all() { replace_all_fast "$@"; } ;;
1) # POSIX version (POSIX compliant)
	replace_all() { replace_all_posix "$@"; } ;;
2) # Pattern version
	replace_all() {
		meta_escape "$1" "$3"
		eval "replace_all_pattern \"\$1\" \"\$2\" \"\${$1}\" \"\$4\""
	} ;;
esac

replace_multiple() {
	eval "${1}=\"\${2}\""
	eval "shift 2; set -- '${1}'" '${@+"${@}"}'

	while [ 2 -le "${#}" ]; do
		eval 'replace_all "${1}"' "\"\${${1}}\"" '"${2}" "${3-}"'

		case "${#}" in
		'2') set -- ;;
		*) eval "shift 3; set -- '${1}'" '${@+"${@}"}' ;;
		esac
	done
}


character_escape() {
	eval "${1}=\"\${2}\""

	set -- "${1}" "${4:-\\}${3}" "${4:-\\}"

	while [ -n "${2}" ]; do
		eval 'replace_all "${1}"' "\"\${${1}}\"" '"${2%%${2#?}}" "${3}${2%%${2#?}}"'

		set -- "${1}" "${2#?}" "${3}"
	done
}


regex_escape() {
	case "${3:-}" in
	'ERE') character_escape "${1}" "${2}" '^$.[]*+?{}()|' ;;
	'SED-ERE') character_escape "${1}" "${2}" '^$.[]*+?{}()|/' ;;
	'SED-BRE') character_escape "${1}" "${2}" '^$.[]*/' ;;
	*) character_escape "${1}" "${2}" '^$.[]*' ;;
	esac
}


readonly CHAR_NUL=''
readonly CHAR_SOH=''
readonly CHAR_STX=''
readonly CHAR_ETX=''
readonly CHAR_EOT=''
readonly CHAR_ENQ=''
readonly CHAR_ACK=''
readonly CHAR_BEL=''
readonly CHAR_BS=''
readonly CHAR_HT='	'
readonly CHAR_LF='
'
readonly CHAR_VT=' '
readonly CHAR_FF='
'
readonly CHAR_CR=''
readonly CHAR_SO=''
readonly CHAR_SI=''
readonly CHAR_DLE=''
readonly CHAR_DC1=''
readonly CHAR_DC2=''
readonly CHAR_DC3=''
readonly CHAR_DC4=''
readonly CHAR_NAK=''
readonly CHAR_SYN=''
readonly CHAR_ETB=''
readonly CHAR_CAN=''
readonly CHAR_EM=''
readonly CHAR_SUB=''
readonly CHAR_ESC=''
readonly CHAR_FS=''
readonly CHAR_GS=''
readonly CHAR_RS=''
readonly CHAR_US=''
readonly CHAR_DEL=''

parser_definition() {
	setup REST abbr:true error:option_error plus:true no:0 help:usage \
		-- 'Usage:' "  ${2##*/} [OPTION]... [TEXT]..." \
		'' 'Options:'

	flag exactFlag -e --{no-}exact init:@no -- '単語ごとに検索を行う'
	param :'number=$((OPTARG))' -n --number init:='+1' validate:'regex_match "${OPTARG}" "^[+-][1-9][0-9]*$"' var:SIGNED_INTEGER -- "指定回数検索を行う"
	disp :usage -h --help -- 'このヘルプを表示して終了する'
	disp VERSION -v --version -- 'バージョン情報を表示して終了する'

	msg -- '' 'Exit Status:' \
		'    0 - successful termination' \
		'   64 - command line usage error' \
		'   65 - data format error' \
		'   66 - cannot open input' \
		'   67 - addressee unknown' \
		'   68 - host name unknown' \
		'   69 - service unavailable' \
		'   70 - internal software error' \
		"   71 - system error (e.g., can't fork)" \
		'   72 - critical OS file missing' \
		"   73 - can't create (user) output file" \
		'   74 - input/output error' \
		'   75 - temp failure; user is invited to retry' \
		'   76 - remote error in protocol' \
		'   77 - permission denied' \
		'   78 - configuration error' \
		'  129 - received SIGHUP' \
		'  130 - received SIGINT' \
		'  131 - received SIGQUIT' \
		'  143 - received SIGTERM'
}

exactFlag='0'
OPTARG='+1'
number=$((OPTARG))
REST=''
parse() {
	OPTIND=$(($# + 1))
	while OPTARG= && [ $# -gt 0 ]; do
		set -- "${1%%\=*}" "${1#*\=}" "$@"
		while [ ${#1} -gt 2 ]; do
			case $1 in *[!a-zA-Z0-9_-]*) break ;; esac
			case '--exact' in
			"$1")
				OPTARG=
				break
				;;
			$1*) OPTARG="$OPTARG --exact" ;;
			esac
			case '--no-exact' in
			"$1")
				OPTARG=
				break
				;;
			$1*) OPTARG="$OPTARG --no-exact" ;;
			esac
			case '--number' in
			"$1")
				OPTARG=
				break
				;;
			$1*) OPTARG="$OPTARG --number" ;;
			esac
			case '--help' in
			"$1")
				OPTARG=
				break
				;;
			$1*) OPTARG="$OPTARG --help" ;;
			esac
			case '--version' in
			"$1")
				OPTARG=
				break
				;;
			$1*) OPTARG="$OPTARG --version" ;;
			esac
			break
		done
		case ${OPTARG# } in
		*\ *)
			eval "set -- $OPTARG $1 $OPTARG"
			OPTIND=$((($# + 1) / 2)) OPTARG=$1
			shift
			while [ $# -gt "$OPTIND" ]; do
				OPTARG="$OPTARG, $1"
				shift
			done
			set "Ambiguous option: $1 (could be $OPTARG)" ambiguous "$@"
			option_error "$@" >&2 || exit $?
			echo "$1" >&2
			exit 1
			;;
		?*)
			[ "$2" = "$3" ] || OPTARG="$OPTARG=$2"
			shift 3
			eval 'set -- "${OPTARG# }"' ${1+'"$@"'}
			OPTARG=
			;;
		*) shift 2 ;;
		esac
		case $1 in
		--?*=*)
			OPTARG=$1
			shift
			eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
			;;
		--no-* | --without-*) unset OPTARG ;;
		-[n]?*)
			OPTARG=$1
			shift
			eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
			;;
		-[ehv]?*)
			OPTARG=$1
			shift
			eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
			OPTARG=
			;;
		+*) unset OPTARG ;;
		esac
		case $1 in
		'-e' | '--exact' | '--no-exact')
			[ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
			eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG='0'
			exactFlag="$OPTARG"
			;;
		'-n' | '--number')
			[ $# -le 1 ] && set "required" "$1" && break
			OPTARG=$2
			regex_match "${OPTARG}" "^[+-][1-9][0-9]*$" || {
				set -- regex_match:$? "$1" regex_match "${OPTARG}" "^[+-][1-9][0-9]*$"
				break
			}
			number=$((OPTARG))
			shift
			;;
		'-h' | '--help')
			usage
			exit 0
			;;
		'-v' | '--version')
			echo "${VERSION}"
			exit 0
			;;
		--)
			shift
			while [ $# -gt 0 ]; do
				REST="${REST} \"\${$((OPTIND - $#))}\""
				shift
			done
			break
			;;
		[-+]?*)
			set "unknown" "$1"
			break
			;;
		*)
			REST="${REST} \"\${$((OPTIND - $#))}\""
			;;
		esac
		shift
	done
	[ $# -eq 0 ] && {
		OPTIND=1
		unset OPTARG
		return 0
	}
	case $1 in
	unknown) set "Unrecognized option: $2" "$@" ;;
	noarg) set "Does not allow an argument: $2" "$@" ;;
	required) set "Requires an argument: $2" "$@" ;;
	pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
	notcmd) set "Not a command: $2" "$@" ;;
	*) set "Validation error ($1): $2" "$@" ;;
	esac
	option_error "$@" >&2 || exit $?
	echo "$1" >&2
	exit 1
}
usage() {
	cat <<'GETOPTIONSHERE'
Usage:
  w3mfindinpage [OPTION]... [TEXT]...

Options:
  -e,     --{no-}exact        単語ごとに検索を行う
  -n,     --number SIGNED_INTEGER 
                              指定回数検索を行う
  -h,     --help              このヘルプを表示して終了する
  -v,     --version           バージョン情報を表示して終了する

Exit Status:
    0 - successful termination
   64 - command line usage error
   65 - data format error
   66 - cannot open input
   67 - addressee unknown
   68 - host name unknown
   69 - service unavailable
   70 - internal software error
   71 - system error (e.g., can't fork)
   72 - critical OS file missing
   73 - can't create (user) output file
   74 - input/output error
   75 - temp failure; user is invited to retry
   76 - remote error in protocol
   77 - permission denied
   78 - configuration error
  129 - received SIGHUP
  130 - received SIGINT
  131 - received SIGQUIT
  143 - received SIGTERM
GETOPTIONSHERE
}

parse ${@+"${@}"}
eval "set -- ${REST}"

search=''
header=''

for keyword in ${@+"${@}"}; do
	case "${keyword}" in ?*)
		regex_escape 'keyword' "${keyword}" 'ERE'
		search="${search}${search:+|}$(printf '%s' "${keyword}" | tr -- '\n' ' ' | tr -d -- '\r')"
		;;
	esac
done

case "${search}" in ?*)
	case "${exactFlag}" in '1')
		search="(^|[${CHAR_HT} ])(${search})([${CHAR_HT} ]|\$)"
		;;
	esac

	while [ "${number}" -ne 0 ]; do
		if [ "${exactFlag}" -eq 1 ] && [ "${number}" -lt 0 ]; then
			header="${header} -H 'W3m-control: MOVE_LEFT1'"
		fi

		if [ "${number}" -lt 0 ]; then
			header="${header} -H \"W3m-control: SEARCH_BACK \${search}\""
			number=$((number + 1))
		else
			header="${header} -H \"W3m-control: SEARCH \${search}\""
			number=$((number - 1))
		fi

		if [ "${exactFlag}" -eq 1 ]; then
			header="${header} -H 'W3m-control: MOVE_RIGHT1'"
		fi
	done
	;;
esac

eval org_lc "httpresponse -H 'W3m-control: BACK' ${header}"
