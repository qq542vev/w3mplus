#!/usr/bin/env sh


VERSION='w3mfindinpage 1.1.4'



set -efu
umask '0022'
LC_ALL='C'
IFS=$(printf ' \t\n_')
IFS="${IFS%_}"
PATH="${PATH-}${PATH:+:}$(command -p getconf 'PATH')"
UNIX_STD='2003'         # HP-UX POSIX mode
XPG_SUS_ENV='ON'        # AIX POSIX mode
XPG_UNIX98='OFF'        # AIX UNIX 03 mode
POSIXLY_CORRECT='1'     # GNU Coreutils POSIX mode
COMMAND_MODE='unix2003' # macOS UNIX 03 mode
export 'IFS' 'LC_ALL' 'PATH' 'UNIX_STD' 'XPG_SUS_ENV' 'XPG_UNIX98' 'POSIXLY_CORRECT' 'COMMAND_MODE'




readonly 'EX_OK=0' # successful termination

readonly 'EX__BASE=64' # base value for error messages

readonly 'EX_USAGE=64'       # command line usage error
readonly 'EX_DATAERR=65'     # data format error
readonly 'EX_NOINPUT=66'     # cannot open input
readonly 'EX_NOUSER=67'      # addressee unknown
readonly 'EX_NOHOST=68'      # host name unknown
readonly 'EX_UNAVAILABLE=69' # service unavailable
readonly 'EX_SOFTWARE=70'    # internal software error
readonly 'EX_OSERR=71'       # system error (e.g., can't fork)
readonly 'EX_OSFILE=72'      # critical OS file missing
readonly 'EX_CANTCREAT=73'   # can't create (user) output file
readonly 'EX_IOERR=74'       # input/output error
readonly 'EX_TEMPFAIL=75'    # temp failure; user is invited to retry
readonly 'EX_PROTOCOL=76'    # remote error in protocol
readonly 'EX_NOPERM=77'      # permission denied
readonly 'EX_CONFIG=78'      # configuration error

readonly 'EX__MAX=78' # maximum listed value

trap 'case "${?}" in 0) endCall;; *) endCall "${EX_SOFTWARE}";; esac' 0 # EXIT
trap 'endCall 129' 1                                                    # SIGHUP
trap 'endCall 130' 2                                                    # SIGINT
trap 'endCall 131' 3                                                    # SIGQUIT
trap 'endCall 143' 15                                                   # SIGTERM

endCall() {
	trap '' 0 # EXIT
	rm -fr -- ${tmpDir:+"${tmpDir}"}
	exit "${1:-0}"
}



option_error() {
	printf '%s: %s\n' "${0##*/}" "${1}" >&2
	printf '%s\n' "詳細については '${0##*/} --help' を実行してください。" >&2

	endCall "${EX_USAGE}"
}



regex_match() {
	awk -- '
		BEGIN {
			for(i = 2; i < ARGC; i++) {
				if(ARGV[1] !~ ARGV[i]) {
					exit 1
				}
			}

			exit
		}
	' ${@+"${@}"} || return 1

	return 0
}



regex_escape() {
	set -- "${1}" "${2}" "${3-}" ''
	until [ "${2#*'\'}" = "${2}" ]; do
		set -- "${1}" "${2#*'\'}" "${3-}" "${4}${2%%'\'*}\\\\"
	done

	set -- "${1}" "${4}${2}" "${3-}" ''
	until [ "${2#*'['}" = "${2}" ]; do
		set -- "${1}" "${2#*'['}" "${3-}" "${4}${2%%'['*}\\["
	done

	set -- "${1}" "${4}${2}" "${3-}" ''
	until [ "${2#*'.'}" = "${2}" ]; do
		set -- "${1}" "${2#*'.'}" "${3-}" "${4}${2%%'.'*}\\."
	done

	set -- "${1}" "${4}${2}" "${3-}" ''
	until [ "${2#*'*'}" = "${2}" ]; do
		set -- "${1}" "${2#*'*'}" "${3-}" "${4}${2%%'*'*}\\*"
	done

	set -- "${1}" "${4}${2}" "${3-}" ''
	until [ "${2#*'^'}" = "${2}" ]; do
		set -- "${1}" "${2#*'^'}" "${3-}" "${4}${2%%'^'*}\\^"
	done

	set -- "${1}" "${4}${2}" "${3-}" ''
	until [ "${2#*'$'}" = "${2}" ]; do
		set -- "${1}" "${2#*'$'}" "${3-}" "${4}${2%%'$'*}\\$"
	done

	case "${3:-BRE}" in
	'ERE' | 'SED-ERE')
		set -- "${1}" "${4}${2}" "${3-}" ''
		until [ "${2#*'+'}" = "${2}" ]; do
			set -- "${1}" "${2#*'+'}" "${3-}" "${4}${2%%'+'*}\\+"
		done

		set -- "${1}" "${4}${2}" "${3-}" ''
		until [ "${2#*'?'}" = "${2}" ]; do
			set -- "${1}" "${2#*'?'}" "${3-}" "${4}${2%%'?'*}\\?"
		done

		set -- "${1}" "${4}${2}" "${3-}" ''
		until [ "${2#*'|'}" = "${2}" ]; do
			set -- "${1}" "${2#*'|'}" "${3-}" "${4}${2%%'|'*}\\|"
		done

		set -- "${1}" "${4}${2}" "${3-}" ''
		until [ "${2#*'('}" = "${2}" ]; do
			set -- "${1}" "${2#*'('}" "${3-}" "${4}${2%%'('*}\\("
		done

		set -- "${1}" "${4}${2}" "${3-}" ''
		until [ "${2#*')'}" = "${2}" ]; do
			set -- "${1}" "${2#*')'}" "${3-}" "${4}${2%%')'*}\\)"
		done

		set -- "${1}" "${4}${2}" "${3-}" ''
		until [ "${2#*'{'}" = "${2}" ]; do
			set -- "${1}" "${2#*'{'}" "${3-}" "${4}${2%%'{'*}\\{"
		done
		;;
	esac

	case "${3:-BRE}" in
	'SED-BRE' | 'SED-ERE')
		set -- "${1}" "${4}${2}" "${3-}" ''
		until [ "${2#*'/'}" = "${2}" ]; do
			set -- "${1}" "${2#*'/'}" "${3-}" "${4}${2%%'/'*}\\/"
		done
		;;
	esac

	eval "${1}=\"\${4}\${2}\""
}


readonly CHAR_NUL=''
readonly CHAR_SOH=''
readonly CHAR_STX=''
readonly CHAR_ETX=''
readonly CHAR_EOT=''
readonly CHAR_ENQ=''
readonly CHAR_ACK=''
readonly CHAR_BEL=''
readonly CHAR_BS=''
readonly CHAR_HT='	'
readonly CHAR_LF='
'
readonly CHAR_VT=' '
readonly CHAR_FF='
'
readonly CHAR_CR=''
readonly CHAR_SO=''
readonly CHAR_SI=''
readonly CHAR_DLE=''
readonly CHAR_DC1=''
readonly CHAR_DC2=''
readonly CHAR_DC3=''
readonly CHAR_DC4=''
readonly CHAR_NAK=''
readonly CHAR_SYN=''
readonly CHAR_ETB=''
readonly CHAR_CAN=''
readonly CHAR_EM=''
readonly CHAR_SUB=''
readonly CHAR_ESC=''
readonly CHAR_FS=''
readonly CHAR_GS=''
readonly CHAR_RS=''
readonly CHAR_US=''
readonly CHAR_DEL=''

parser_definition() {
	setup REST abbr:true error:option_error plus:true no:0 help:usage \
		-- 'Usage:' "  ${2##*/} [OPTION]... [TEXT]..." \
		'' 'Options:'

	flag exactFlag -e --{no-}exact init:@no -- '単語ごとに検索を行う'
	param :'number=$((OPTARG))' -n --number init:='+1' validate:'regex_match "${OPTARG}" "^[+-][1-9][0-9]*$"' var:SIGNED_INTEGER -- "指定回数検索を行う"
	disp :usage -h --help -- 'このヘルプを表示して終了する'
	disp VERSION -v --version -- 'バージョン情報を表示して終了する'

	msg -- '' 'Exit Status:' \
		'    0 - successful termination' \
		'   64 - command line usage error' \
		'   65 - data format error' \
		'   66 - cannot open input' \
		'   67 - addressee unknown' \
		'   68 - host name unknown' \
		'   69 - service unavailable' \
		'   70 - internal software error' \
		"   71 - system error (e.g., can't fork)" \
		'   72 - critical OS file missing' \
		"   73 - can't create (user) output file" \
		'   74 - input/output error' \
		'   75 - temp failure; user is invited to retry' \
		'   76 - remote error in protocol' \
		'   77 - permission denied' \
		'   78 - configuration error' \
		'  129 - received SIGHUP' \
		'  130 - received SIGINT' \
		'  131 - received SIGQUIT' \
		'  143 - received SIGTERM'
}

exactFlag='0'
OPTARG='+1'
number=$((OPTARG))
REST=''
parse() {
	OPTIND=$(($# + 1))
	while OPTARG= && [ $# -gt 0 ]; do
		set -- "${1%%\=*}" "${1#*\=}" "$@"
		while [ ${#1} -gt 2 ]; do
			case $1 in *[!a-zA-Z0-9_-]*) break ;; esac
			case '--exact' in
			"$1")
				OPTARG=
				break
				;;
			$1*) OPTARG="$OPTARG --exact" ;;
			esac
			case '--no-exact' in
			"$1")
				OPTARG=
				break
				;;
			$1*) OPTARG="$OPTARG --no-exact" ;;
			esac
			case '--number' in
			"$1")
				OPTARG=
				break
				;;
			$1*) OPTARG="$OPTARG --number" ;;
			esac
			case '--help' in
			"$1")
				OPTARG=
				break
				;;
			$1*) OPTARG="$OPTARG --help" ;;
			esac
			case '--version' in
			"$1")
				OPTARG=
				break
				;;
			$1*) OPTARG="$OPTARG --version" ;;
			esac
			break
		done
		case ${OPTARG# } in
		*\ *)
			eval "set -- $OPTARG $1 $OPTARG"
			OPTIND=$((($# + 1) / 2)) OPTARG=$1
			shift
			while [ $# -gt "$OPTIND" ]; do
				OPTARG="$OPTARG, $1"
				shift
			done
			set "Ambiguous option: $1 (could be $OPTARG)" ambiguous "$@"
			option_error "$@" >&2 || exit $?
			echo "$1" >&2
			exit 1
			;;
		?*)
			[ "$2" = "$3" ] || OPTARG="$OPTARG=$2"
			shift 3
			eval 'set -- "${OPTARG# }"' ${1+'"$@"'}
			OPTARG=
			;;
		*) shift 2 ;;
		esac
		case $1 in
		--?*=*)
			OPTARG=$1
			shift
			eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
			;;
		--no-* | --without-*) unset OPTARG ;;
		-[n]?*)
			OPTARG=$1
			shift
			eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
			;;
		-[ehv]?*)
			OPTARG=$1
			shift
			eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
			OPTARG=
			;;
		+*) unset OPTARG ;;
		esac
		case $1 in
		'-e' | '--exact' | '--no-exact')
			[ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
			eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG='0'
			exactFlag="$OPTARG"
			;;
		'-n' | '--number')
			[ $# -le 1 ] && set "required" "$1" && break
			OPTARG=$2
			regex_match "${OPTARG}" "^[+-][1-9][0-9]*$" || {
				set -- regex_match:$? "$1" regex_match "${OPTARG}" "^[+-][1-9][0-9]*$"
				break
			}
			number=$((OPTARG))
			shift
			;;
		'-h' | '--help')
			usage
			exit 0
			;;
		'-v' | '--version')
			echo "${VERSION}"
			exit 0
			;;
		--)
			shift
			while [ $# -gt 0 ]; do
				REST="${REST} \"\${$((OPTIND - $#))}\""
				shift
			done
			break
			;;
		[-+]?*)
			set "unknown" "$1"
			break
			;;
		*)
			REST="${REST} \"\${$((OPTIND - $#))}\""
			;;
		esac
		shift
	done
	[ $# -eq 0 ] && {
		OPTIND=1
		unset OPTARG
		return 0
	}
	case $1 in
	unknown) set "Unrecognized option: $2" "$@" ;;
	noarg) set "Does not allow an argument: $2" "$@" ;;
	required) set "Requires an argument: $2" "$@" ;;
	pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
	notcmd) set "Not a command: $2" "$@" ;;
	*) set "Validation error ($1): $2" "$@" ;;
	esac
	option_error "$@" >&2 || exit $?
	echo "$1" >&2
	exit 1
}
usage() {
	cat <<'GETOPTIONSHERE'
Usage:
  w3mfindinpage [OPTION]... [TEXT]...

Options:
  -e,     --{no-}exact        単語ごとに検索を行う
  -n,     --number SIGNED_INTEGER 
                              指定回数検索を行う
  -h,     --help              このヘルプを表示して終了する
  -v,     --version           バージョン情報を表示して終了する

Exit Status:
    0 - successful termination
   64 - command line usage error
   65 - data format error
   66 - cannot open input
   67 - addressee unknown
   68 - host name unknown
   69 - service unavailable
   70 - internal software error
   71 - system error (e.g., can't fork)
   72 - critical OS file missing
   73 - can't create (user) output file
   74 - input/output error
   75 - temp failure; user is invited to retry
   76 - remote error in protocol
   77 - permission denied
   78 - configuration error
  129 - received SIGHUP
  130 - received SIGINT
  131 - received SIGQUIT
  143 - received SIGTERM
GETOPTIONSHERE
}

parse ${@+"${@}"}
eval "set -- ${REST}"

search=''
header=''

for keyword in ${@+"${@}"}; do
	case "${keyword}" in
	?*)
		regex_escape 'keyword' "${keyword}" 'ERE'
		search="${search}${search:+|}$(printf '%s' "${keyword}" | tr -- '\n' ' ' | tr -d -- '\r')"
		;;
	esac
done

case "${search}" in ?*)
	case "${exactFlag}" in
	'1') search="(^|[${CHAR_HT} ])(${search})([${CHAR_HT} ]|\$)" ;;
	esac

	while [ "${number}" -ne 0 ]; do
		if [ "${exactFlag}" -eq 1 ] && [ "${number}" -lt 0 ]; then
			header="${header} -H 'W3m-control: MOVE_LEFT1'"
		fi

		if [ "${number}" -lt 0 ]; then
			header="${header} -H \"W3m-control: SEARCH_BACK \${search}\""
			number=$((number + 1))
		else
			header="${header} -H \"W3m-control: SEARCH \${search}\""
			number=$((number - 1))
		fi

		if [ "${exactFlag}" -eq 1 ]; then
			header="${header} -H 'W3m-control: MOVE_RIGHT1'"
		fi
	done
	;;
esac

eval "httpresponse -H 'W3m-control: BACK' ${header}"
