#!/usr/bin/env sh


VERSION='setusercommand 1.1.3'



set -efu
umask '0022'
LC_ALL='C'
IFS=$(printf ' \t\n_')
IFS="${IFS%_}"
PATH="${PATH-}${PATH:+:}$(command -p getconf 'PATH')"
UNIX_STD='2003'         # HP-UX POSIX mode
XPG_SUS_ENV='ON'        # AIX POSIX mode
XPG_UNIX98='OFF'        # AIX UNIX 03 mode
POSIXLY_CORRECT='1'     # GNU Coreutils POSIX mode
COMMAND_MODE='unix2003' # macOS UNIX 03 mode
export 'IFS' 'LC_ALL' 'PATH' 'UNIX_STD' 'XPG_SUS_ENV' 'XPG_UNIX98' 'POSIXLY_CORRECT' 'COMMAND_MODE'




readonly 'EX_OK=0' # successful termination

readonly 'EX__BASE=64' # base value for error messages

readonly 'EX_USAGE=64'       # command line usage error
readonly 'EX_DATAERR=65'     # data format error
readonly 'EX_NOINPUT=66'     # cannot open input
readonly 'EX_NOUSER=67'      # addressee unknown
readonly 'EX_NOHOST=68'      # host name unknown
readonly 'EX_UNAVAILABLE=69' # service unavailable
readonly 'EX_SOFTWARE=70'    # internal software error
readonly 'EX_OSERR=71'       # system error (e.g., can't fork)
readonly 'EX_OSFILE=72'      # critical OS file missing
readonly 'EX_CANTCREAT=73'   # can't create (user) output file
readonly 'EX_IOERR=74'       # input/output error
readonly 'EX_TEMPFAIL=75'    # temp failure; user is invited to retry
readonly 'EX_PROTOCOL=76'    # remote error in protocol
readonly 'EX_NOPERM=77'      # permission denied
readonly 'EX_CONFIG=78'      # configuration error

readonly 'EX__MAX=78' # maximum listed value

trap 'case "${?}" in 0) end_call;; *) end_call "${EX_SOFTWARE}";; esac' 0 # EXIT
trap 'end_call 129' 1                                                     # SIGHUP
trap 'end_call 130' 2                                                     # SIGINT
trap 'end_call 131' 3                                                     # SIGQUIT
trap 'end_call 143' 15                                                    # SIGTERM


end_call() {
	trap '' 0 # EXIT
	rm -fr -- ${tmpDir:+"${tmpDir}"}
	exit "${1:-0}"
}



option_error() {
	printf '%s: %s\n' "${0##*/}" "${1}" >&2
	printf '%s\n' "詳細については '${0##*/} --help' を実行してください。" >&2

	end_call "${EX_USAGE}"
}



awkv_escape() {
	set -- "${1}" "${2}" ''
	until [ "${2#*\\}" = "${2}" ]; do
		set -- "${1}" "${2#*\\}" "${3}${2%%\\*}\\\\"
	done

	set -- "${1}" "${3}${2}"
	case "${2}" in
	@*) set -- "${1}" "\\100${2#?}" ;;
	esac

	eval "${1}=\${2}"
}


readonly CHAR_NUL=''
readonly CHAR_SOH=''
readonly CHAR_STX=''
readonly CHAR_ETX=''
readonly CHAR_EOT=''
readonly CHAR_ENQ=''
readonly CHAR_ACK=''
readonly CHAR_BEL=''
readonly CHAR_BS=''
readonly CHAR_HT='	'
readonly CHAR_LF='
'
readonly CHAR_VT=' '
readonly CHAR_FF='
'
readonly CHAR_CR=''
readonly CHAR_SO=''
readonly CHAR_SI=''
readonly CHAR_DLE=''
readonly CHAR_DC1=''
readonly CHAR_DC2=''
readonly CHAR_DC3=''
readonly CHAR_DC4=''
readonly CHAR_NAK=''
readonly CHAR_SYN=''
readonly CHAR_ETB=''
readonly CHAR_CAN=''
readonly CHAR_EM=''
readonly CHAR_SUB=''
readonly CHAR_ESC=''
readonly CHAR_FS=''
readonly CHAR_GS=''
readonly CHAR_RS=''
readonly CHAR_US=''
readonly CHAR_DEL=''

output() {
	awk -F '\t' -- '{
		call = $1
		command = $2
		date = $3

		if(NR != 1) {
			printf("\n")
		}

		printf("call type: %s\n", call)
		printf("check command: %s\n", command)
		printf("date: %s\n", date)
	}'
}

parser_definition() {
	setup REST abbr:true error:option_error plus:true no:0 help:usage \
		-- 'Usage:' "  ${2##*/} [OPTION]... [CALL] [COMMAND_ARG]..." \
		'' 'Options:'

	param config -c --config init:'config="${HOME}/.w3mplus/autocmd"' var:FILE -- '設定ファイルを指定する'
	disp :usage -h --help -- 'このヘルプを表示して終了する'
	disp VERSION -v --version -- 'バージョン情報を表示して終了する'

	msg -- '' 'Exit Status:' \
		'    0 - successful termination' \
		'   64 - command line usage error' \
		'   65 - data format error' \
		'   66 - cannot open input' \
		'   67 - addressee unknown' \
		'   68 - host name unknown' \
		'   69 - service unavailable' \
		'   70 - internal software error' \
		"   71 - system error (e.g., can't fork)" \
		'   72 - critical OS file missing' \
		"   73 - can't create (user) output file" \
		'   74 - input/output error' \
		'   75 - temp failure; user is invited to retry' \
		'   76 - remote error in protocol' \
		'   77 - permission denied' \
		'   78 - configuration error' \
		'  129 - received SIGHUP' \
		'  130 - received SIGINT' \
		'  131 - received SIGQUIT' \
		'  143 - received SIGTERM'
}

config="${HOME}/.w3mplus/autocmd"
REST=''
parse() {
	OPTIND=$(($# + 1))
	while OPTARG= && [ $# -gt 0 ]; do
		set -- "${1%%\=*}" "${1#*\=}" "$@"
		while [ ${#1} -gt 2 ]; do
			case $1 in *[!a-zA-Z0-9_-]*) break ;; esac
			case '--config' in
			"$1")
				OPTARG=
				break
				;;
			$1*) OPTARG="$OPTARG --config" ;;
			esac
			case '--help' in
			"$1")
				OPTARG=
				break
				;;
			$1*) OPTARG="$OPTARG --help" ;;
			esac
			case '--version' in
			"$1")
				OPTARG=
				break
				;;
			$1*) OPTARG="$OPTARG --version" ;;
			esac
			break
		done
		case ${OPTARG# } in
		*\ *)
			eval "set -- $OPTARG $1 $OPTARG"
			OPTIND=$((($# + 1) / 2)) OPTARG=$1
			shift
			while [ $# -gt "$OPTIND" ]; do
				OPTARG="$OPTARG, $1"
				shift
			done
			set "Ambiguous option: $1 (could be $OPTARG)" ambiguous "$@"
			option_error "$@" >&2 || exit $?
			echo "$1" >&2
			exit 1
			;;
		?*)
			[ "$2" = "$3" ] || OPTARG="$OPTARG=$2"
			shift 3
			eval 'set -- "${OPTARG# }"' ${1+'"$@"'}
			OPTARG=
			;;
		*) shift 2 ;;
		esac
		case $1 in
		--?*=*)
			OPTARG=$1
			shift
			eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
			;;
		--no-* | --without-*) unset OPTARG ;;
		-[c]?*)
			OPTARG=$1
			shift
			eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
			;;
		-[hv]?*)
			OPTARG=$1
			shift
			eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
			OPTARG=
			;;
		+*) unset OPTARG ;;
		esac
		case $1 in
		'-c' | '--config')
			[ $# -le 1 ] && set "required" "$1" && break
			OPTARG=$2
			config="$OPTARG"
			shift
			;;
		'-h' | '--help')
			usage
			exit 0
			;;
		'-v' | '--version')
			echo "${VERSION}"
			exit 0
			;;
		--)
			shift
			while [ $# -gt 0 ]; do
				REST="${REST} \"\${$((OPTIND - $#))}\""
				shift
			done
			break
			;;
		[-+]?*)
			set "unknown" "$1"
			break
			;;
		*)
			REST="${REST} \"\${$((OPTIND - $#))}\""
			;;
		esac
		shift
	done
	[ $# -eq 0 ] && {
		OPTIND=1
		unset OPTARG
		return 0
	}
	case $1 in
	unknown) set "Unrecognized option: $2" "$@" ;;
	noarg) set "Does not allow an argument: $2" "$@" ;;
	required) set "Requires an argument: $2" "$@" ;;
	pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
	notcmd) set "Not a command: $2" "$@" ;;
	*) set "Validation error ($1): $2" "$@" ;;
	esac
	option_error "$@" >&2 || exit $?
	echo "$1" >&2
	exit 1
}
usage() {
	cat <<'GETOPTIONSHERE'
Usage:
  setusercommand [OPTION]... [CALL] [COMMAND_ARG]...

Options:
  -c,     --config FILE       設定ファイルを指定する
  -h,     --help              このヘルプを表示して終了する
  -v,     --version           バージョン情報を表示して終了する

Exit Status:
    0 - successful termination
   64 - command line usage error
   65 - data format error
   66 - cannot open input
   67 - addressee unknown
   68 - host name unknown
   69 - service unavailable
   70 - internal software error
   71 - system error (e.g., can't fork)
   72 - critical OS file missing
   73 - can't create (user) output file
   74 - input/output error
   75 - temp failure; user is invited to retry
   76 - remote error in protocol
   77 - permission denied
   78 - configuration error
  129 - received SIGHUP
  130 - received SIGINT
  131 - received SIGQUIT
  143 - received SIGTERM
GETOPTIONSHERE
}

parse ${@+"${@}"}
eval "set -- ${REST}"

if [ '!' -e "${config}" ]; then
	configDir=$(
		dirname -- "${config}"
		printf '_'
	)
	mkdir -p -- "${configDir%?_}"

	: >"${config}"
fi

if [ '!' -f "${config}" ]; then
	cat <<-__EOF__ >&2
		${0##*/}: '${config}' は通常ファイルではありません。
		詳細については '${0##*/} --help' を実行してください。
	__EOF__

	end_call "${EX_DATAERR}"
elif [ '!' -r "${config}" ]; then
	cat <<-__EOF__ >&2
		${0##*/}: '${config}' の読み込み許可がありません。
		詳細については '${0##*/} --help' を実行してください。
	__EOF__

	end_call "${EX_NOINPUT}"
fi

case "${#}" in
'0')
	${VISUAL:-${EDITOR:-vi --}} "${config}"
	exit
	;;
esac

awkv_escape 'key' "${1}"
shift

awkv_escape 'command' "${*}"
tmpDir="$(mktemp -d)"

case "${#}" in
'0')
	awkScript=$(
		cat <<-'__EOF__'



			function backslash_escape(string) {
				gsub("\\\\", "\\\\", string)
				gsub("\\001", "\\001", string)
				gsub("\\002", "\\002", string)
				gsub("\\003", "\\003", string)
				gsub("\\004", "\\004", string)
				gsub("\\005", "\\005", string)
				gsub("\\006", "\\006", string)
				gsub("\\007", "\\007", string)
				gsub("\\010", "\\010", string)
				gsub("\\011", "\\011", string)
				gsub("\\012", "\\012", string)
				gsub("\\013", "\\013", string)
				gsub("\\014", "\\014", string)
				gsub("\\015", "\\015", string)
				gsub("\\016", "\\016", string)
				gsub("\\017", "\\017", string)
				gsub("\\020", "\\020", string)
				gsub("\\021", "\\021", string)
				gsub("\\022", "\\022", string)
				gsub("\\023", "\\023", string)
				gsub("\\024", "\\024", string)
				gsub("\\025", "\\025", string)
				gsub("\\026", "\\026", string)
				gsub("\\027", "\\027", string)
				gsub("\\030", "\\030", string)
				gsub("\\031", "\\031", string)
				gsub("\\032", "\\032", string)
				gsub("\\033", "\\033", string)
				gsub("\\034", "\\034", string)
				gsub("\\035", "\\035", string)
				gsub("\\036", "\\036", string)
				gsub("\\037", "\\037", string)
				gsub("\\177", "\\177", string)

				return string
			}

						BEGIN {
							FS = "\t"
							esKey = backslash_escape(key)
						}

						{
							if($1 == esKey) {
								printf("%s\n", $0) >>del
							} else {
								printf("%s\n", $0)
							}
						}
		__EOF__
	)
	awkv_escape 'del' "${tmpDir}/del"

	awk \
		-v "key=${key}" -v "del=${del}" \
		-- "${awkScript}" "${config}"
	;;
*)
	awkScript=$(
		cat <<-'__EOF__'



			function backslash_escape(string) {
				gsub("\\\\", "\\\\", string)
				gsub("\\001", "\\001", string)
				gsub("\\002", "\\002", string)
				gsub("\\003", "\\003", string)
				gsub("\\004", "\\004", string)
				gsub("\\005", "\\005", string)
				gsub("\\006", "\\006", string)
				gsub("\\007", "\\007", string)
				gsub("\\010", "\\010", string)
				gsub("\\011", "\\011", string)
				gsub("\\012", "\\012", string)
				gsub("\\013", "\\013", string)
				gsub("\\014", "\\014", string)
				gsub("\\015", "\\015", string)
				gsub("\\016", "\\016", string)
				gsub("\\017", "\\017", string)
				gsub("\\020", "\\020", string)
				gsub("\\021", "\\021", string)
				gsub("\\022", "\\022", string)
				gsub("\\023", "\\023", string)
				gsub("\\024", "\\024", string)
				gsub("\\025", "\\025", string)
				gsub("\\026", "\\026", string)
				gsub("\\027", "\\027", string)
				gsub("\\030", "\\030", string)
				gsub("\\031", "\\031", string)
				gsub("\\032", "\\032", string)
				gsub("\\033", "\\033", string)
				gsub("\\034", "\\034", string)
				gsub("\\035", "\\035", string)
				gsub("\\036", "\\036", string)
				gsub("\\037", "\\037", string)
				gsub("\\177", "\\177", string)

				return string
			}

						BEGIN {
							FS = "\t"
							esKey = backslash_escape(key)
							esCommand = backslash_escape(command)
						}

						$1 != esKey || $2 != esCommand {
							printf("%s\n", $0)
						}

						END {
							printf("%s\t%s\t%s\n", esKey, esCommand, date)
							printf("%s\t%s\t%s\n", esKey, esCommand, date) >>add
						}
		__EOF__
	)
	awkv_escape 'add' "${tmpDir}/add"

	awk \
		-v "key=${key}" -v "command=${command}" \
		-v "date=$(date -u '+%Y-%m-%dT%H:%M:%SZ')" -v "add=${add}" \
		-- "${awkScript}" "${config}"
	;;
esac | sort -k '1,1' -k '3,3' -t "${CHAR_HT}" -o "${config}"

awkScript=$(
	cat <<-'__EOF__'

		BEGIN {
			FS = "\t"
		}

		{
			call = $1
			command = $2
			date = $3

			if(NR != 1) {
				printf("\n")
			}

			printf("call type: %s\n", call)
			printf("check command: %s\n", command)
			printf("date: %s\n", date)
		}
	__EOF__
)

if [ -s "${tmpDir}/del" ]; then
	printf 'Deleted user command\n\n'

	awk -- "${awkScript}" "${tmpDir}/del"
elif [ -s "${tmpDir}/add" ]; then
	printf 'Added user command\n\n'

	awk -- "${awkScript}" "${tmpDir}/add"
fi
