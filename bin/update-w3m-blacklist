#!/usr/bin/env sh

## File: update-w3m-blacklist
##
## Update the blacklist for w3m.
##
## Usage:
##
##   (start code)
##   update-w3m-blacklist [OPTION]... [SITECONF_FILE]...
##   (end)
##
## Options:
##
##   -b, --begin=MESSAGE - begin message
##   -e, --end=MESSAGE   - end message
##   -r, --redirect=URI  - redirect page
##   -h, --help          - display this help and exit
##   -v, --version       - output version information and exit
##
## Exit Status:
##
##   0 - Program terminated normally.
##   64<= and <=78 - Program terminated abnormally. See </usr/include/sysexits.h> for the returned value.
##
## Metadata:
##
##   author - qq542vev <https://purl.org/meta/me/>
##   version - 4.1.2
##   date - 2020-06-06
##   since - 2019-10-31
##   copyright - Copyright (C) 2019-2020 qq542vev. Some rights reserved.
##   license - CC-BY <https://creativecommons.org/licenses/by/4.0/>
##   package - w3mplus
##
## See Also:
##
##   * Project homepage - <https://github.com/qq542vev/w3mplus>
##   * Bag report - <https://github.com/qq542vev/w3mplus/issues>

# 初期化
set -efu
umask '0022'
IFS=$(printf ' \t\n$'); IFS="${IFS%$}"
export 'IFS'

# initファイルの読み込み
: "${W3MPLUS_PATH:=${HOME}/.w3m/w3mplus}"
. "${W3MPLUS_PATH}/lib/w3mplus/init"

# 各変数に既定値を代入する
redirect="file:///cgi-bin/blocking?"
beginMessage='# BEGIN - Blacklist'
endMessage='# END - Blacklist'
args=''

# コマンドライン引数の解析する
while [ 1 -le "${#}" ]; do
	case "${1}" in
		'-b' | '--begin')
			if [ "$(printf '%s' "${2}" | wc -l)" -eq 0 ]; then
				beginMessage="${2}"
				shift 2
			else
				cat <<- EOF 1>&2
					${0##*/}: '${1}' must not contain newlines.
					Try '${0##*/} --help' for more information.
				EOF

				exitStatus="${EX_USAGE}"; exit
			fi
			;;
		'-e' | '--end')
			if [ "$(printf '%s' "${2}" | wc -l)" -eq 0 ]; then
				endMessage="${2}"
				shift 2
			else
				cat <<- EOF 1>&2
					${0##*/}: '${1}' must not contain newlines.
					Try '${0##*/} --help' for more information.
				EOF

				exitStatus="${EX_USAGE}"; exit
			fi
			;;
		'-r' | '--redirect')
			redirect="${2}"
			shift 2
			;;
		# ヘルプメッセージを表示して終了する
		'-h' | '--help')
			usage
			exit
			;;
		# バージョン情報を表示して終了する
		'-v' | '--version')
			version
			exit
			;;
		# `--name=value` 形式のロングオプション
		'--'[!-]*'='*)
			option="${1}"
			shift
			# `--name value` に変換して再セットする
			set -- "${option%%=*}" "${option#*=}" ${@+"${@}"}
			;;
		# 以降はオプション以外の引数
		'--')
			shift
			args="${args}$(quoteEscape ${@+"${@}"})"
			shift "${#}"
			;;
		# 複合ショートオプション
		'-'[!-][!-]*)
			option=$(printf '%s\n' "${1}" | cut -c '2'; printf '$')
			options=$(printf '%s\n' "${1}" | cut -c '3-'; printf '$')

			shift
			# `-abc` を `-a -bc` に変換して再セットする
			set -- "-${option%?$}" "-${options%?$}" ${@+"${@}"}
			;;
		# その他の無効なオプション
		'-'*)
			cat <<- EOF 1>&2
				${0##*/}: invalid option -- '${1}'
				Try '${0##*/} --help' for more information.
			EOF

			exitStatus="${EX_USAGE}"; exit
			;;
		# その他のオプション以外の引数
		*)
			args="${args}$(quoteEscape "${1}")"
			shift
			;;
	esac
done

# オプション以外の引数を再セットする
eval set -- "${args}"

# 引数の個数が過小である
case "${#}" in '0')
	set -- "${HOME}/.w3m/siteconf"
	;;
esac

tmpFile=$(mktemp)
awkScript=$(
	cat <<- 'EOF'
	BEGIN {
		split("http https", protocols)
	}

	function quoteEscape(string) {
		gsub(/'+/, "'\"&\"'", string)

		return "'" string "'"
	}

	function urlEncode(string, result) {
		command = "printf '%s' " quoteEscape(string) " | urlencode"
		command | getline result
		close(command)

		return result
	}

	function joinField(start, end, delimiter) {
		if(start <= end) {
			return $start ((start == end) ? "" : delimiter) joinField(start + 1, end, delimiter)
		}

		return ""
	}

	function arrayToQuery(array, result) {
		result = ""

		for(key in array) {
			result = result ((result == "") ? "" : "&") urlEncode(key) "=" urlEncode(array[key])
		}

		return result
	}

	function printRedirect(url, redirect, exact) {
		printf("url \"%s\"%s\n", url, (exact ? " exact" : ""))
		printf("substitute_url \"%s\"\n", redirect url)
		printf("\n")
	}

	$0 == beginMessage {
		printf("%s\n", $0)

		split("", properties)

		while((0 < getline) && ($0 ~ /^#+[	 ]+@[a-z]+[	 ]+/)) {
			printf("%s\n", $0)

			sub(/@/, "", $2)
			properties[$2] = joinField(3, NF, " ")
		}

		query = arrayToQuery(properties)

		system("printf 'Downloading... %s\n' " quoteEscape(properties["source"]) " 1>&2")
		system("w3m -dump_source -o 'auto_uncompress=1' " quoteEscape(properties["source"]) " | tr -- '\\r' '\\n' >'" tmpFile "'")
		status = system("[ -s '" tmpFile "' ]")

		if(status) {
			system("printf 'Download failed. Skip and proceed to the next.\n' 1>&2")
		} else {
			system("printf 'Converting...\n' 1>&2")
		}

		while(0 < (getline address < (tmpFile))) {
			if(address ~ /^[A-Za-z][A-Za-z0-9+.-]*:\/\//) {
				printRedirect(address, redirect query "&url=", 1)
			} else if(address ~ /^([A-Za-z0-9._~!$&'()*+,;=-]|%[0-9A-Fa-f][0-9A-Fa-f])+$/) {
				for(i in protocols) {
					printRedirect(protocols[i] "://" address "/", redirect query "&url=")
				}
			} else {
				split(address, fields)

				if((fields[1] == "0.0.0.0" || fields[1] == "127.0.0.1") && fields[2] ~ /^[0-9A-Za-z]([.0-9A-Za-z-]*[0-9A-Za-z])?\.[0-9A-Za-z]([0-9A-Za-z-]*[0-9A-Za-z])?$/) {
					for(i in protocols) {
						printRedirect(protocols[i] "://" fields[2] "/", redirect query "&url=")
					}
				}
			}
		}

		close(tmpFile)

		do {
			if($0 == endMessage) {
				break
			}

			if(status) {
				printf("%s\n", $0)
			}
		}	while(0 < getline)
	}

	{
		printf("%s\n", $0)
	}
	EOF
)

for file in ${@+"${@}"}; do
	awk -v "beginMessage=$(printf '%s' "${beginMessage}" | octalEncode)" -v "endMessage=$(printf '%s' "${endMessage}" | octalEncode)" -v "redirect=${redirect}" -v "tmpFile=${tmpFile}" "${awkScript}" "${file}" | sponge -- "${file}"
done
